# -*- coding:utf-8 -*-
__author__ = 'xm'
import sqlalchemy as sa
from neutron.db import model_base
from neutron.db import models_v2
from neutron.db import external_net_db
from neutron.openstack.common import log as logging
from netaddr import *
from sqlalchemy.orm import exc
from neutron.extensions import gcloud_nat
from neutron.db import common_db_mixin as base_db

LOG = logging.getLogger(__name__)


class GcloudNat(model_base.BASEV2, models_v2.HasId, models_v2.HasCreateTime, models_v2.HasTenant):
    """Represents a router gateway port nat.

    This class is desgin for tengzheng project at 2015.12.7.
    """
    router_id = sa.Column(sa.String(36), sa.ForeignKey('routers.id'), nullable=False)
    port_id = sa.Column(sa.String(36), sa.ForeignKey('ports.id'), nullable=False)
    ext_ip = sa.Column(sa.String(64))
    int_ip = sa.Column(sa.String(64))
    ext_port = sa.Column(sa.Integer())
    int_port = sa.Column(sa.Integer())
    user_id = sa.Column(sa.String(64))


class GcloudNatMixin(base_db.CommonDbMixin):
    """Operator of gcloud nat.

    For router gateway nat add/delete/update/get
    """
    def get_gcloud_nat(self, context, id, fields=None):
        LOG.debug(_("111111 get_gcloud_nat %s"), id)
        gcloud_nat_db = self._get_gcloud_nat(context, id)
        nat = self._make_gcloud_nat_dict(gcloud_nat_db)
        #nat = {"ext_ip":"11.11.11.11", "ext_port":2222, "int_ip":"192.0.0.10", "int_port": 22}
        LOG.debug(_("111111 get_gcloud_nat nat %s"), nat)
        return nat

    def get_gcloud_nats(self, context, filters=None, fields=None,
                    sorts=None, limit=None, marker=None,
                    page_reverse=False, offset=None):
        LOG.debug(_("111111 gets %s"))
        # nats=[]
        # nat = {"ext_ip":"11.11.11.11", "ext_port":2222, "int_ip":"192.0.0.10", "int_port": 22}
        # nats.append(nat)
        # nats.append(nat)
        # return nats

        return self._get_collection(context, GcloudNat,
                                    self._make_gcloud_nat_dict,
                                    filters=filters, fields=fields,
                                    sorts=sorts,
                                    limit=limit,
                                    page_reverse=page_reverse)

    def create_gcloud_nat(self, context, gcloud_nat):
        LOG.debug(_("111111 create %s"), gcloud_nat)
        nat = gcloud_nat['gcloud_nat']
        LOG.debug(_("111111 create 2 %s"), nat)
        tenant_id = self._get_tenant_id_for_create(context, nat)
        with context.session.begin(subtransactions=True):
            gcloud_nat_db = GcloudNat(
                tenant_id=tenant_id,
                router_id=nat["router_id"],
                port_id=nat["port_id"],
                ext_ip=nat["ext_ip"],
                ext_port=nat["ext_port"],
                int_ip=nat["int_ip"],
                int_port=nat["int_port"],
                user_id=context.user)
            context.session.add(gcloud_nat_db)

        response = self._make_gcloud_nat_dict(gcloud_nat_db)
        router_id = nat['router_id']
        #self.notify_router_updated(context, router_id, 'create_gcloud_nat', {})
        LOG.debug(_("111111 create response= %s"), response)
        return response

    def delete_gcloud_nat(self, context, id):
        LOG.debug(_("111111 delete %s"), id)
        with context.session.begin(subtransactions=True):
            gcloud_nat_db = self._get_gcloud_nat(context, id)
            context.session.delete(gcloud_nat_db)
        #self.notify_router_deleted(context, gcloud_nat_db["router_id"])

    def update_gcloud_nat(self, context, id, gcloud_nat):
        LOG.debug(_("111111 update id=%s gcloud_nat=%s"), id, gcloud_nat)
        nat = gcloud_nat['gcloud_nat']
        with context.session.begin(subtransactions=True):
            gcloud_nat_db = self._get_gcloud_nat(context, id)
            if nat:
                gcloud_nat_db.update(nat)
        #self.notify_routers_updated(context, gcloud_nat_db["router_id"], 'update_gcloud_nat', {})
        return self._make_gcloud_nat_dict(gcloud_nat_db)

    def _make_gcloud_nat_dict(self, gcloud_nat_db, fields=None):
        resp={"id": gcloud_nat_db["id"], "router_id": gcloud_nat_db["router_id"], "port_id": gcloud_nat_db["port_id"],
              "ext_ip": gcloud_nat_db["ext_ip"], "ext_port": gcloud_nat_db["ext_port"],
              "int_ip": gcloud_nat_db["int_ip"], "int_port": gcloud_nat_db["int_port"],
              "user_id": gcloud_nat_db["user_id"], "create_time": gcloud_nat_db["create_time"]}
        return resp

    def _get_gcloud_nat(self, context, nat_id):
        try:
            nat = self._get_by_id(context, GcloudNat, nat_id)
        except exc.NoResultFound:
            raise gcloud_nat.NatNotFound(nat_id=nat_id)
        return nat

















    def get_ipinfo(self, context, id, fields=None):
        subnet_id = id
        ip_used_num = context.session.query(models_v2.IPAllocation).filter_by(subnet_id=subnet_id)
        ip_used_num = ip_used_num.count()
        subnet = context.session.query(models_v2.Subnet).filter_by(id=subnet_id).first()
        if subnet:
            ip=IPNetwork(subnet['cidr'])
            ip_total_num = ip.size - 1
            ip_free_num = ip_total_num - ip_used_num
            ipinfo = {"subnet_id": subnet_id, "ip_used_num": ip_used_num, "ip_free_num": ip_free_num, "ip_total_num": ip_total_num}
            return ipinfo
        else:
            LOG.error(_("no subnet with subnet_id=%s exist!"), subnet_id)
            ipinfo= {"subnet_id": subnet_id, "ip_used_num": 0, "ip_free_num": 0, "ip_total_num": 0}
            return ipinfo

    def get_ipinfos(self, context, filters=None, fields=None,
                    sorts=None, limit=None, marker=None,
                    page_reverse=False, offset=None):
        #brk(host="10.10.12.21", port=49175)
        ipinfos=[]
        #从数据库externalnetwork表中获取所有的外网网络
        external_nets = context.session.query(external_net_db.ExternalNetwork).all()
        external_nets_ids = []
        for net in external_nets:
            external_nets_ids.append(net.network_id)
        #获取所有的子网
        query = context.session.query(models_v2.Subnet)
        query.order_by("id")
        subnets = query.all()
        if subnets:
            if filters and filters.get('router:external', None) and filters.get('router:external', None)[0] == u'false':
                    for subnet in subnets:
                        if subnet["network_id"] in external_nets_ids:
                            continue
                        else:
                            ip_used_num = context.session.query(models_v2.IPAllocation).filter_by(subnet_id=subnet["id"])
                            ip_used_num = ip_used_num.count()
                            ip=IPNetwork(subnet['cidr'])
                            ip_total_num = ip.size - 1
                            ip_free_num = ip_total_num - ip_used_num
                            ipinfo = {"subnet_id": subnet["id"], "ip_used_num": ip_used_num, "ip_free_num": ip_free_num, "ip_total_num": ip_total_num}
                            ipinfos.append(ipinfo)
            else:
                for subnet in subnets:
                    if subnet["network_id"] not in external_nets_ids:
                        continue
                    else:
                        ip_used_num = context.session.query(models_v2.IPAllocation).filter_by(subnet_id=subnet["id"])
                        ip_used_num = ip_used_num.count()
                        ip=IPNetwork(subnet['cidr'])
                        ip_total_num = ip.size -1
                        ip_free_num = ip_total_num - ip_used_num
                        ipinfo = {"subnet_id": subnet["id"], "ip_used_num": ip_used_num, "ip_free_num": ip_free_num, "ip_total_num": ip_total_num}
                        ipinfos.append(ipinfo)
        else:
            LOG.error("no subnet exist!")
        return ipinfos